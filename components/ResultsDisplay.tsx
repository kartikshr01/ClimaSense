import React, { useContext } from 'react';
import { ComfortData } from '../types';
import { TemperatureIcon, HumidityIcon, WindyIcon, WetIcon, HappyIcon, SadIcon, NeutralIcon, LightbulbIcon, DownloadIcon } from './Icons';
import { LanguageContext } from '../contexts/LanguageContext';
import { t } from '../lib/i18n';

interface ResultsDisplayProps {
  data: ComfortData;
}

const getComfortInfo = (comfortLevel: string) => {
  const level = comfortLevel.toLowerCase();

  if (level.includes('comfortable') || level.includes('mild') || level.includes('cool') || level.includes('आरामदायक') || level.includes('हल्का')) {
    return {
      Icon: HappyIcon,
      gradient: 'bg-gradient-to-br from-[#a2d2ff] to-[#bde0fe]',
    };
  }
  if (level.includes('uncomfortable') || level.includes('windy') || level.includes('humid') || level.includes('असुविधाजनक') || level.includes('हवादार') || level.includes('आर्द्र')) {
    return {
      Icon: NeutralIcon,
      gradient: 'bg-gradient-to-br from-[#faedcd] to-[#ffc8dd]',
    };
  }
  if (level.includes('hot') || level.includes('cold') || level.includes('wet') || level.includes('stormy') || level.includes('extreme') || level.includes('गर्म') || level.includes('ठंडा') || level.includes('गीला') || level.includes('तूफानी')) {
    return {
      Icon: SadIcon,
      gradient: 'bg-gradient-to-br from-[#cdb4db] to-[#ffc8dd]',
    };
  }

  return {
    Icon: NeutralIcon,
    gradient: 'bg-gradient-to-br from-slate-400 to-gray-500',
  };
};

const DataPoint: React.FC<{ icon: React.ReactNode; label: string; value: string; unit: string; color: string; }> = ({ icon, label, value, unit, color }) => (
    <div className="flex items-center gap-4 p-3 bg-white/40 rounded-lg">
        <div className={`w-8 h-8 flex-shrink-0 ${color}`}>{icon}</div>
        <div className="flex-grow">
            <p className="text-sm text-slate-500">{label}</p>
            <p className="text-lg font-bold text-slate-800">
                {value} <span className="text-sm font-normal">{unit}</span>
            </p>
        </div>
    </div>
);

const RecommendationCard: React.FC<{ recommendation: string }> = ({ recommendation }) => {
    const { language } = useContext(LanguageContext);
    return (
        <div className="bg-[#faedcd]/40 backdrop-blur-lg p-6 rounded-2xl shadow-lg border border-white/30 flex items-start gap-4">
            <div className="w-10 h-10 flex-shrink-0 text-[#a2d2ff]">
                <LightbulbIcon />
            </div>
            <div>
                <h3 className="text-xl font-bold text-slate-800">{t('results.recommendationTitle', language)}</h3>
                <p className="mt-2 text-slate-700">{recommendation}</p>
            </div>
        </div>
    )
};

export const ResultsDisplay: React.FC<ResultsDisplayProps> = ({ data }) => {
    const { comfort, summary, input, source, recommendation, location, date } = data;
    const { language } = useContext(LanguageContext);
    const comfortInfo = getComfortInfo(comfort);

    const formattedDate = new Date(date + 'T00:00:00').toLocaleDateString(language === 'hi' ? 'hi-IN' : 'en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
    });
    
    const handleDownload = () => {
        const fileContent = `ClimaSense - Outdoor Comfort Prediction
-----------------------------
Location: ${location}
Date: ${formattedDate}
-----------------------------
PREDICTED COMFORT: ${comfort}
Summary: ${summary}
Recommendation: ${recommendation}
-----------------------------
Fetched Weather Data:
- Temperature: ${input.temp.toFixed(1)}°C
- Humidity: ${input.humidity.toFixed(1)}%
- Wind Speed: ${input.wind.toFixed(1)} km/h
- Chance of Precipitation: ${input.rain.toFixed(1)}%
-----------------------------
Generated by: ${source}
`;
        const blob = new Blob([fileContent], { type: 'text/plain;charset=utf-8' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = `Comfort_Prediction_${location.replace(/,?\s+/g, '_')}_${date}.txt`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
    };

    return (
        <div className="space-y-6 animate-fade-in">
             <div className="flex justify-between items-center">
                <div className="text-left">
                    <p className="text-slate-600">{t('results.predictionFor', language)}</p>
                    <h2 className="text-xl sm:text-2xl font-bold text-slate-800">{location}</h2>
                    <p className="text-slate-500">{formattedDate}</p>
                </div>
                <button 
                    onClick={handleDownload}
                    className="flex items-center gap-2 px-4 py-2 bg-[#bde0fe]/50 border border-white/40 rounded-lg text-slate-700 font-semibold hover:bg-[#a2d2ff]/60 transition-all duration-300 shadow-sm hover:shadow-md"
                    aria-label="Download Prediction"
                >
                    <div className="w-5 h-5"><DownloadIcon /></div>
                    <span>{t('results.download', language)}</span>
                </button>
            </div>

            <div className={`p-4 sm:p-6 rounded-2xl text-slate-800 shadow-xl ${comfortInfo.gradient} flex flex-col sm:flex-row items-center gap-4 sm:gap-6`}>
                <div className="w-16 h-16 flex-shrink-0">
                    <comfortInfo.Icon />
                </div>
                <div className="text-center sm:text-left">
                    <h3 className="text-sm font-semibold uppercase tracking-wider text-slate-700/80">{t('results.predictedComfort', language)}</h3>
                    <h2 className="text-3xl sm:text-4xl font-bold">{comfort}</h2>
                    <p className="mt-2 text-slate-800/90">{summary}</p>
                </div>
            </div>
            
            {recommendation && <RecommendationCard recommendation={recommendation} />}

            <div className="bg-[#faedcd]/40 backdrop-blur-lg p-6 rounded-2xl shadow-lg border border-white/30">
                <h3 className="text-xl font-bold mb-4 text-slate-800">{t('results.weatherDataTitle', language)}</h3>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <DataPoint icon={<TemperatureIcon />} label={t('results.temp', language)} value={input.temp.toFixed(1)} unit="°C" color="text-[#a2d2ff]" />
                    <DataPoint icon={<HumidityIcon />} label={t('results.humidity', language)} value={input.humidity.toFixed(1)} unit="%" color="text-[#bde0fe]" />
                    <DataPoint icon={<WindyIcon />} label={t('results.wind', language)} value={input.wind.toFixed(1)} unit="km/h" color="text-[#cdb4db]" />
                    <DataPoint icon={<WetIcon />} label={t('results.rain', language)} value={input.rain.toFixed(1)} unit="%" color="text-[#ffc8dd]" />
                </div>
                 <p className="text-xs text-center mt-4 text-slate-500">
                    {t('results.source', language, { source })}
                </p>
            </div>
        </div>
    );
};